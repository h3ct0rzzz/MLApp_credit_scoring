import catboost as cb
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import json
import numpy as np


def corr_res(val):
    if (val >= 0.3) and (val < 0.5):
        return "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
    elif (val >= 0.5) and (val < 0.7):
        return "–ó–∞–º–µ—Ç–Ω–∞—è"
    elif (val >= 0.7) and (val < 0.9):
        return "–í—ã—Å–æ–∫–∞—è"
    elif (val >= 0.9):
        return "–í–µ—Å—å–º–∞ –≤—ã—Å–æ–∫–∞—è"
    else:
        return "–°–ª–∞–±–∞—è"


def age_vectorize(val):
    age = np.zeros((3, ))
    if val == "–æ—Ç 35 –¥–æ 50":
        age[0] = 1
    if val == "–æ—Ç 50 –¥–æ 65":
        age[1] = 1
    if val == "–æ—Ç 65":
        age[2] = 1
    return age

def loans_vectorize(val):
    arr = np.zeros((4, ))
    if val == "–æ—Ç 2 –¥–æ 4":
        arr[0] = 1
    if val == "–æ—Ç 4 –¥–æ 6":
        arr[1] = 1
    if val == "–æ—Ç 6 –¥–æ 8":
        arr[2] = 1
    if val == "–°–≤—ã—à–µ 8":
        arr[3] = 1
    return arr


data = pd.read_csv("data/credit_scoring.csv")

with open("cols_map.json", "r", encoding="utf-8") as json_file:
    col_map = json.load(json_file)
col_df = pd.DataFrame(columns=["col", "description"])
col_df["col"] = col_map.keys()
col_df["description"] = col_map.values()

st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –±–∞–Ω–∫–∞",
    layout="wide"
)
st.title("–ü—Ä–æ–≥–Ω–æ–∑ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –±–∞–Ω–∫–∞")
placeholder = st.empty()

with placeholder.container():
    st.write("## –ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∞—Ä—Ö–∏–≤–Ω—ã–º –¥–∞–Ω–Ω—ã–º.")

    st.write("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    st.table(data.head(5))

    raws, columns, memory_usage = st.columns(3)
    raws.metric(
        label="–ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫",
        value=data.shape[0],
        delta=-22081,
        delta_color="inverse"
    )
    columns.metric(
        label="–ö–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤",
        value=data.shape[1],
        delta="+4",
        delta_color="inverse"
    )
    memory_usage.metric(
        label="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏",
        value=f"{round(data.memory_usage().sum() / 1024 ** 2, 1)}–ú–±",
        delta="-7.9–ú–±",
        delta_color="inverse"
    )

    selector = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫", data.columns)
    st.table(col_df[col_df["col"] == selector])

    st.write("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    val, res = st.columns(2)
    val.metric(
        label="–ó–Ω–∞—á–µ–Ω–∏–µ",
        value=(
            round(data[[selector, "SeriousDlqin2yrs"]].corr().values[0, 1], 5)
            if selector not in ["RealEstateLoansOrLines", "GroupAge"] else "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        )
    )
    res.metric(
        label="–û–ø–∏—Å–∞–Ω–∏–µ",
        value=(
            corr_res(round(data[[selector, "SeriousDlqin2yrs"]].corr().values[0, 1]))
            if selector not in ["RealEstateLoansOrLines", "GroupAge"] else "–ù–µ–ª—å–∑—è –ø–æ—Å—á–∏—Ç–∞—Ç—å"
        )
    )

    
    st.write("## –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")

    radio1, radio2 = st.columns(2)
    with radio1:
        radio1 = st.radio(
            "–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞:",
            ("–æ—Ç 21 –¥–æ 35", "–æ—Ç 35 –¥–æ 50", "–æ—Ç 50 –¥–æ 65", "–æ—Ç 65")
        )

    with radio2:
        radio2 = st.radio(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:",
            ("–¥–æ 2", "–æ—Ç 2 –¥–æ 4", "–æ—Ç 4 –¥–æ 6", "–æ—Ç 6 –¥–æ 8", "—Å–≤—ã—à–µ 8")
        )

    st.write("–ë—ã–ª–∞ –ª–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∞ –¥–≤–∞ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥?")
    radio3, radio4, radio5 = st.columns(3)
    with radio3:
        radio3 = st.radio(
            "–û—Ç 30 –¥–æ 59 –¥–Ω–µ–π?",
            ("–î–∞", "–ù–µ—Ç")
        )

    with radio4:
        radio4 = st.radio(
            "–û–¢ 60 –¥–æ 89 –¥–Ω–µ–π?",
            ("–î–∞", "–ù–µ—Ç")
        )

    with radio5:
        radio5 = st.radio(
            "–°–≤—ã—à–µ 90 –¥–Ω–µ–π?",
            ("–î–∞", "–ù–µ—Ç")
        )

    num1 = st.number_input("–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å—Ä–µ–¥—Å—Ç–≤:")
    num2 = st.number_input("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥:")
    num23 = st.number_input("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:")
    if num2 != 0:
        num3 = num23 / num2
    else:
        num3 = num23 / 1
    num4 = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∫—Ä–µ–¥–∏—Ç–æ–≤, –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –∏ —Ç.–¥):")
    num5 = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤ –Ω–∞ –ø–æ–ø–µ—á–µ–Ω–∏–∏ (—Å—É–ø—Ä—É–≥–∏, –¥–µ—Ç–∏ –∏ –¥—Ä):")


    full_arr = np.asarray([
        num1,
        1 if radio3 == "–î–∞" else 0,
        num3,
        num2,
        num4,
        1 if radio5 == "–î–∞" else 0,
        1 if radio4 == "–î–∞" else 0,
        num5
    ])
    full_arr = np.hstack([full_arr, loans_vectorize(radio2), age_vectorize(radio1)])

    clf = cb.CatBoostClassifier()
    clf.load_model("weights/clf")
    prob = clf.predict_proba(full_arr)[1]
    if (prob >= 0.5) and (prob < 0.75):
        st.warning(f"–° –≤–µ—Ä–æ—Ç—è–Ω–æ—Å—Ç—å—é {round(prob * 100, 2)} —É –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç  –ø—Ä–æ—Å—Ä–æ—á–∫–∞ –≤ 90 –∏–ª–∏ 90+ –¥–Ω–µ–π", icon="‚ö†Ô∏è")
    elif prob >= 0.75:
        st.error(f"–° –≤–µ—Ä–æ—Ç—è–Ω–æ—Å—Ç—å—é {round(prob * 100, 2)} —É –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç  –ø—Ä–æ—Å—Ä–æ—á–∫–∞ –≤ 90 –∏–ª–∏ 90+ –¥–Ω–µ–π", icon="üö®")
    else:
        st.info(f"–° –≤–µ—Ä–æ—Ç—è–Ω–æ—Å—Ç—å—é {round(prob * 100, 2)} —É –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç  –ø—Ä–æ—Å—Ä–æ—á–∫–∞ –≤ 90 –∏–ª–∏ 90+ –¥–Ω–µ–π", icon="‚ÑπÔ∏è")
